datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    email          String           @id
    username       String           @unique
    password       String           @db.Text
    name           String?
    phone          String?          @db.VarChar(12)
    role           Role             @default(USER)
    timestamp      DateTime         @default(now())
    // location      Json?
    avatar         String?          @db.Text
    items          Item[]
    my_carts       Cart[]
    my_favourites  Favourite[]
    requestHistory RequestHistory[]
    chats          Chat[]           @relation("chatParticipants")
    messages       Message[]

    @@map("users")
}

model Item {
    id             Int              @id @default(autoincrement())
    user           User             @relation(fields: [email], references: [email])
    email          String
    name           String
    category       ItemCategory     @relation(fields: [category_id], references: [id])
    category_id    Int
    quantity       Int
    condition      String?
    expiry         DateTime?        @db.Date
    location       Json
    description    String?          @db.Text
    timestamp      DateTime         @default(now())
    available      Boolean          @default(true)
    images         Json?
    cart           Cart[]
    favourite      Favourite[]
    requested_user RequestHistory[]

    @@map("items")
}

model ItemCategory {
    id    Int     @id @default(autoincrement())
    name  String
    image String? @db.Text
    Item  Item[]

    @@map("item_category")
}

model RequestHistory {
    id        Int      @id @default(autoincrement())
    item_id   Int
    item      Item     @relation(fields: [item_id], references: [id])
    quantity  Int
    email     String
    user      User     @relation(fields: [email], references: [email])
    completed Boolean  @default(false)
    timestamp DateTime @default(now())

    @@map("req_history")
}

model Cart {
    id       Int    @id @default(autoincrement())
    item_id  Int
    item     Item   @relation(fields: [item_id], references: [id])
    quantity Int
    email    String
    user     User   @relation(fields: [email], references: [email])

    @@map("carts")
}

model Favourite {
    id      Int    @id @default(autoincrement())
    item_id Int
    item    Item   @relation(fields: [item_id], references: [id])
    email   String
    user    User   @relation(fields: [email], references: [email])

    @@map("favourites")
}

model Chat {
    id           Int       @id @default(autoincrement())
    participants User[]    @relation("chatParticipants")
    createdAt    DateTime  @default(now())
    messages     Message[]

    @@map("chats")
}

model Message {
    id        Int      @id @default(autoincrement())
    chat      Chat     @relation(fields: [chat_id], references: [id])
    chat_id   Int
    user      User     @relation(fields: [userEmail], references: [email])
    userEmail String
    text      String?
    image     String? // Store image URL if any
    sent      Boolean  @default(true)
    received  Boolean  @default(false)
    createdAt DateTime @default(now())
}

enum Role {
    USER
    ADMIN
}

// model User {
//     id       Int       @id @default(autoincrement())
//     email    String    @unique
//     name     String?
//     chats    Chat[]    @relation("ChatParticipants")
//     messages Message[]
// }

// model Chat {
//     id           Int       @id @default(autoincrement())
//     participants User[]    @relation("ChatParticipants")
//     messages     Message[]
// }

// model Message {
//     id        Int      @id @default(autoincrement())
//     text      String
//     chat      Chat     @relation(fields: [chatId], references: [id])
//     chatId    Int
//     sender    User     @relation(fields: [senderId], references: [id])
//     senderId  Int
//     createdAt DateTime @default(now())
// }
